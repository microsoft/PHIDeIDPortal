@page
@using System.Globalization
@model JustificationModel
@{
    ViewData["Title"] = "Justification";
    int i = 0;
}

<table id="tblDocs" class="table">
    <thead>
        <tr>
            <th nowrap>Document</th>
            <th>Author</th>
            <th>Last Indexed</th>
            <th nowrap>Redacted Content</th>
            <th nowrap>Metadata</th>
        </tr>
    </thead>
    <tbody>
        @{
            if (Model.Results is null) return;
            @foreach (SearchResult<SearchDocument> result in Model.Results)
            {
                var (text, awaitingIndexing) = await @Model.GetMetadataRecord(result.Document["metadata_storage_path"].ToString());
                
                if(awaitingIndexing)continue;

                string piiHoverMessage;
                string piiItemsList = string.Empty;
                if (!result.Document.ContainsKey("piiEntities")) // ToDo: Add log entries for each of the conditions
                {
                    piiHoverMessage = "<div class='piiHover containsError bg-danger'><strong>Error.</strong> result.Document does not contain piiEntities.</div>";
                }
                else if (!result.Document["piiEntities"].GetType().IsArray)
                {
                    piiHoverMessage = "<div class='piiHover containsError bg-danger'><strong>Error.</strong> piiEntities is not an array. Type: " + result.Document["piiEntities"].GetType().ToString() + "</div>";
                }
                else if ((result.Document["piiEntities"] as Array)?.Length == 0)
                {
                    piiHoverMessage = "<div class='piiHover containsNoPii bg-success'>This document <strong>does not contain PII/PHI</strong> identified content.</div>";
                }
                else
                {
                    piiHoverMessage = "<div class='piiHover containsPii bg-warning'>This document <strong>contains PII/PHI</strong> identified content. Click to view more...</div>";
                    
                    for (int piiEntityCount = 0; piiEntityCount < (result.Document["piiEntities"] as Array).Length; piiEntityCount++)
                    {
                        piiItemsList += $"{(result.Document["piiEntities"] as Array).GetValue(piiEntityCount)?.ToString()}{(piiEntityCount < (result.Document["piiEntities"] as Array).Length - 1 ? ",\n" : "")}";
                    }
                }

                var redactedSummary = (result.Document["redactedContent"].ToString()) is var rc && rc.Length > 512 ? $"{rc[..511]}..." : rc;

                <tr class="@(i % 2 == 0 ? "row-even" : "row-odd")">
                    <td class="tdtop">@result.Document["metadata_storage_name"]</td>
                    <td class="tdtop">@result.Document["author"].ToString().Split('@')[0]</td>
                    <td class="date-column tdtop">
                        @{
                            var lastIndexedString = (result.Document.ContainsKey("lastIndexed") && result.Document["lastIndexed"] is not null) ? result.Document["lastIndexed"] : DateTime.MinValue;
                            DateTime.TryParse(lastIndexedString.ToString(), out DateTime lastIndexed);
                            if (lastIndexed == DateTime.MinValue) { <span><i>unindexed</i></span> }
                            else { <span><script type="text/javascript">document.write(moment(moment.utc('@lastIndexed.ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture)').toDate()).local().format('YYYY-MM-DD hh:mm A'));</script></span> }
                        }
                    </td>
                    <!-- <td style="vertical-align: top;">@result.Document["content"]</td> -->
                    <td class="redacted-content-td tagged">
                        <div class="content">@redactedSummary @Html.Raw(piiHoverMessage)<div class="piiDetails">@piiItemsList</div></div>
                        <div style="padding: 0 !important; margin-top: 8px;" class="row">
                            <div>
                                <textarea class="form-control submit-justification-text" rows="2" placeholder="Justification for releasing with PHI (required for manual review)."></textarea>
                            </div>
                            <div>
                                <button class="btn btn-secondary submit-justification-button" type="button" disabled data-href='@result.Document["metadata_storage_path"]'><i class="bi bi-check-lg"></i> Request Manual Review</button>
                                @{
                                    if (Model.IsDownloadFeatureAvailable)
                                    {
                                        <button class="btn btn-secondary download-button" type="button" id="download-button" data-href='@result.Document["metadata_storage_name"]'><i class="bi bi-download"></i> Download</button>
                                    }

                                    if (Model.IsDeleteFeatureAvailable)
                                    {
                                        <button class="btn btn-danger delete-button" type="button" data-href='@result.Document["metadata_storage_path"]'><i class="bi bi-x-lg"></i> Delete</button>
                                    }
                                }                                
                            </div>
                        </div>
                    </td>
                    <td>
                        @{
                            var metadataTags = (object[])result.Document["organizationalMetadata"];
                        }
                        @foreach (var tag in metadataTags)
                        {
                            if (String.IsNullOrWhiteSpace(tag.ToString())) { @Html.Raw($"<div class='tagCloudElemPlaceholder'>&nbsp;<span></span></div>") }
                            else { @Html.Raw($"<div class='tagCloudElem'><span>{tag}</span></div>") }
                        }
                    </td>
                </tr>

                i++;
            }
        }
    </tbody>
</table>
